# 重要

私はClineよりプログラミングが得意ですが、時短のためにClineにコーディングを依頼しています。

ただし、ClineはGitHubから学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。

反面、CLineは現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

# 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。

# ベストプラクティス

Clineは、以下のベストプラクティスに従ってコーディングを行います。

## TypeScript関連

### 関数型アプローチ (FP)

- 純粋関数を優先する
- 不変データ構造を使用する
- 副作用を分離する
- 型安全性を確保する

## 一般的なコーディングスタイル

- 小さく始めて段階的に拡張する
- 過度な抽象化を避ける
- コードよりも型を重視する

# プロジェクトの構成

このリポジトリは、様々なソーシャルブックマークサービスのデータをCSV形式で保存するためのTypeScriptプロジェクトです。いわゆるmonorepo(ひとつのリポジトリに複数個のサービスのソースを格納し、一元管理する思想)のプロジェクトとなっています。

一部のサービスは、APIを使用してデータを取得しますが、APIがないサービスについては、puppeteerでHTMLを解析してデータを取得します。一部のサービスでは、保存したCSVファイルのデータを用いて、追加の処理を行う可能性があります。各ディレクトリでは`npx tsx index.ts`のように、エントリポイントとなるtsファイルを直接実行することで作動します。さらにGitHub Actionsを使用して、定期的にクローラを実行し、最新のデータを取得します。

各ディレクトリごとに、各サービスのクローラのコードとその出力結果が含まれています。例えば `bookmeter`ディレクトリには、BookmeterのクローラとCSVが含まれています。`qiita_lgtm`ディレクトリには、QiitaのLGTMのクローラとCSVが含まれています。各ディレクトリで共通する処理は `.lib`ディレクトリにまとめられています。

## bookmeter_wish

このディレクトリは、このリポジトリの中で最も重要な部分です。読書メーター(bookmeter.com)のクローラとその出力結果(`/csv/*`)を含みます。特に、読みたい本(wish)および積読本(stacked)のデータが格納されています。

`bookmeter_wish`ディレクトリには、以下のファイルが含まれています。

- `index.ts`: エントリポイント
- `bookmaker.ts`: bookmeterのクローラ
- `fetchers.ts`: ISBNをキーとして、書誌情報APIのリクエストを行う処理
- `constants.ts`: 定数を定義
- `types.ts`: 型定義
- `utils.ts`: ユーティリティ関数
- `csv/bookmeter_wish.csv`: bookmeterから取得したwishデータ
- `csv/bookmeter_stacked.csv`: bookmeterから取得したstackedデータ

私は現在、あらすじ・目次の情報を取得する機能を開発中です。以下は、この機能に関わるファイルです。私は、この機能の開発をClineに依頼します。

- `books.sqlite`: wish/stackedデータをSQLiteに保存したもの
- `sqlite.ts`: SQLiteの操作を行う処理
- `kinokuniya.ts`: 紀伊國屋書店のオンラインストアをクロールして、ISBNから書籍のあらすじ・目次の情報を取得する。ここから取得したデータは、`books.sqlite`には保存されるが、ファイルの肥大化を防ぐためにcsvファイルには保存されない予定である。

現在の`bookmeter_wish`プロジェクトは、以下のような流れで動作します。

1. `index.ts`がエントリポイントとなり、クローラを起動します。
2. `bookmaker.ts`がpuppeteerを使用して、bookmeter.comにアクセスし、wish/stackedデータを取得します。前回の実行時のデータと比較して、変更があった場合のみ、データを更新します。
3. `fetchers.ts`を使用して、書誌情報APIにリクエストを行い、書籍の詳細情報を取得します。これらの情報は、wish/stackedデータに追加され、ISBNをキーとするMapオブジェクトとして管理されます。
4. 取得したデータは、`csv/bookmeter_wish.csv`および`csv/bookmeter_stacked.csv`に保存されます。

