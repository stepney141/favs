# 重要

私はClineよりプログラミングが得意ですが、時短のためにClineにコーディングを依頼しています。

ただし、ClineはGitHubから学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。

反面、CLineは現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

# 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。

# コーディングプラクティス

Clineは、以下の方針に従ってコーディングを行います。

## 原則

## 一般的なスタイル

- 小さく始めて段階的に拡張する
- 過度な抽象化を避ける
- コードよりも型を重視する

### 関数型アプローチ (FP)

- 純粋関数を使用する
- 副作用とそれ以外の処理を分離する
- 不変データ構造を使用する
- 型安全性を確保する

### ドメイン駆動設計 (DDD)

- 値オブジェクトとエンティティを区別
- 集約で整合性を保証
- リポジトリでデータアクセスを抽象化
- 境界付けられたコンテキストを意識

### テスト駆動開発 (TDD)

- Red-Green-Refactorサイクル
- テストを仕様として扱う
- 小さな単位で反復
- 継続的なリファクタリング

## TypeScript

TypeScriptでのコーディングにおける一般的なベストプラクティスをまとめます。

### 方針

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様化を可能な限り明記する
- 実装が内部状態を持たないとき、 class による実装を避けて関数を優先する
- 副作用を抽象するために、アダプタパターンで外部依存を抽象し、テストではインメモリなアダプタで処理する
- 代数的データ型(Option, Eitherなど)は**利用しない**
  - 代数的データ型は、TypeScriptの言語機能と相性が悪く、可読性を損なうことがあるため
  - エラーハンドリングではTry-CatchとResult型を使い分ける

### 型の使用方針

1. 具体的な型を使用
   - any の使用を避ける
   - unknown を使用してから型を絞り込む
   - Utility Types を活用する

2. 型エイリアスの命名
   - 意味のある名前をつける
   - 型の意図を明確にする

### エラー処理

1. 「技術的例外」にはTry-Catch, Error型を使用
2. 「ビジネス例外」にはResult型を使用
   - 成功と失敗を明示的に分ける
   - エラーの詳細を含める
   - 型安全性を確保する
3. エラー型の定義
   - 具体的なケースを列挙
   - エラーメッセージを含める
   - 型の網羅性チェックを活用

### 実装パターン

1. 関数ベース（状態を持たない場合）
   ```ts
   // インターフェース
   interface Logger {
     log(message: string): void;
   }

   // 実装
   function createLogger(): Logger {
     return {
       log(message: string): void {
         console.log(`[${new Date().toISOString()}] ${message}`);
       },
     };
   }
   ```

2. classベース（状態を持つ場合）
   ```ts
   interface Cache<T> {
     get(key: string): T | undefined;
     set(key: string, value: T): void;
   }

   class TimeBasedCache<T> implements Cache<T> {
     private items = new Map<string, { value: T; expireAt: number }>();

     constructor(private ttlMs: number) {}

     get(key: string): T | undefined {
       const item = this.items.get(key);
       if (!item || Date.now() > item.expireAt) {
         return undefined;
       }
       return item.value;
     }

     set(key: string, value: T): void {
       this.items.set(key, {
         value,
         expireAt: Date.now() + this.ttlMs,
       });
     }
   }
   ```

3. Adapterパターン（外部依存の抽象化）
   ```ts
   // 抽象化
   type Fetcher = <T>(path: string) => Promise<Result<T, ApiError>>;

   // 実装
   function createFetcher(headers: Record<string, string>): Fetcher {
     return async <T>(path: string) => {
       try {
         const response = await fetch(path, { headers });
         if (!response.ok) {
           return err({
             type: "network",
             message: `HTTP error: ${response.status}`,
           });
         }
         return ok(await response.json());
       } catch (error) {
         return err({
           type: "network",
           message: error instanceof Error ? error.message : "Unknown error",
         });
       }
     };
   }

   // 利用
   class ApiClient {
     constructor(
       private readonly getData: Fetcher,
       private readonly baseUrl: string,
     ) {}

     async getUser(id: string): Promise<Result<User, ApiError>> {
       return await this.getData(`${this.baseUrl}/users/${id}`);
     }
   }
   ```

### 実装の選択基準

1. 関数を選ぶ場合
   - 単純な操作のみ
   - 内部状態が不要
   - 依存が少ない
   - テストが容易

2. classを選ぶ場合
   - 内部状態の管理が必要
   - 設定やリソースの保持が必要
   - メソッド間で状態を共有
   - ライフサイクル管理が必要

3. Adapterを選ぶ場合
   - 外部依存の抽象化
   - テスト時のモック化が必要
   - 実装の詳細を隠蔽したい
   - 差し替え可能性を確保したい

### 一般的なルール

1. 依存性の注入
   - 外部依存はコンストラクタで注入
   - テスト時にモックに置き換え可能に
   - グローバルな状態を避ける

2. インターフェースの設計
   - 必要最小限のメソッドを定義
   - 実装の詳細を含めない
   - プラットフォーム固有の型を避ける

3. テスト容易性
   - モックの実装を簡潔に
   - エッジケースのテストを含める
   - テストヘルパーを適切に分離

4. コードの分割
   - 単一責任の原則に従う
   - 適切な粒度でモジュール化
   - 循環参照を避ける

# プロジェクトの構成

このリポジトリは、様々なソーシャルブックマークサービスのデータをCSV形式で保存するためのプロジェクトです。いわゆるmonorepo(ひとつのリポジトリに複数個のサービスのソースを格納し、一元管理する思想)のプロジェクトとなっています。

一部のサービスは、APIを使用してデータを取得しますが、APIがないサービスについては、puppeteerでHTMLを解析してデータを取得します。一部のサービスでは、保存したCSVファイルのデータを用いて、追加の処理を行う可能性があります。各ディレクトリでは`npx tsx index.ts`のように、エントリポイントとなるtsファイルを直接実行することで作動します。さらにGitHub Actionsを使用して、定期的にクローラを実行し、最新のデータを取得します。

各ディレクトリごとに、各サービスのクローラのコードとその出力結果が含まれています。例えば `bookmeter`ディレクトリには、BookmeterのクローラとCSVが含まれています。`qiita_lgtm`ディレクトリには、QiitaのLGTMのクローラとCSVが含まれています。各ディレクトリで共通する処理は `.lib`ディレクトリにまとめられています。


## 技術スタック

- フロントエンド
  - TypeScript (tsxで実行)
- フォーマッター
  - Prettier
  - ESLint

## bookmeter

このディレクトリは、このリポジトリの中で最も重要な部分です。読書メーター(bookmeter.com)のクローラとその出力結果(`/csv/*`)を含みます。特に、読みたい本(wish)および積読本(stacked)のデータが格納されています。

`bookmeter`ディレクトリには、以下のファイルが含まれています。

- `index.ts`: エントリポイント
- `bookmaker.ts`: bookmeterのクローラ
- `fetchers.ts`: ISBNをキーとして、書誌情報APIのリクエストを行う処理
- `constants.ts`: 定数を定義
- `types.ts`: 型定義
- `utils.ts`: ユーティリティ関数
- `csv/bookmeter_wish_books.csv`: bookmeterから取得したwishデータ
- `csv/bookmeter_stacked_books.csv`: bookmeterから取得したstackedデータ

現在の`bookmeter`プロジェクトは、以下のような流れで動作します。

1. `index.ts`がエントリポイントとなり、クローラを起動します。
2. `bookmaker.ts`がpuppeteerを使用して、bookmeter.comにアクセスし、wish/stackedデータを取得します。前回の実行時のデータと比較して、変更があった場合のみ、データを更新します。
3. `fetchers.ts`を使用して、書誌情報APIにリクエストを行い、書籍の詳細情報を取得します。これらの情報は、wish/stackedデータに追加され、ISBNをキーとするMapオブジェクトとして管理されます。
4. 取得したデータは、SQLiteにエクスポートされます。その結果を元に`csv/bookmeter_wish_books.csv`および`csv/bookmeter_stacked_books.csv`が更新されます。

さらに、あらすじ・目次の情報を取得する機能もあります。以下は、この機能に関わるファイルです。

- `books.sqlite`: wish/stackedデータをSQLiteに保存したもの
- `sqlite.ts`: SQLiteの操作を行う処理
- `kinokuniya.ts`: 紀伊國屋書店のオンラインストアをクロールして、ISBNから書籍のあらすじ・目次の情報を取得する。ここから取得したデータは、`books.sqlite`には保存されるが、ファイルの肥大化を防ぐためにcsvファイルには保存されない。

